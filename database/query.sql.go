// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO PRODUCT (
    name, company, subtype, weight, unit
) VALUES(
    $1, $2, $3, $4, $5
)
RETURNING id, name, company, subtype, weight, unit, carbs, protein, fiber, fats
`

type CreateProductParams struct {
	Name    string
	Company pgtype.Text
	Subtype pgtype.Text
	Weight  pgtype.Float4
	Unit    pgtype.Text
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, createProduct,
		arg.Name,
		arg.Company,
		arg.Subtype,
		arg.Weight,
		arg.Unit,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Company,
		&i.Subtype,
		&i.Weight,
		&i.Unit,
		&i.Carbs,
		&i.Protein,
		&i.Fiber,
		&i.Fats,
	)
	return i, err
}

const getAll = `-- name: GetAll :many
SELECT id, name, company, subtype, weight, unit, carbs, protein, fiber, fats FROM PRODUCT
`

func (q *Queries) GetAll(ctx context.Context) ([]Product, error) {
	rows, err := q.db.Query(ctx, getAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Company,
			&i.Subtype,
			&i.Weight,
			&i.Unit,
			&i.Carbs,
			&i.Protein,
			&i.Fiber,
			&i.Fats,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProduct = `-- name: GetProduct :one
SELECT id, name, company, subtype, weight, unit, carbs, protein, fiber, fats FROM PRODUCT
WHERE name=$1 LIMIT 2
`

func (q *Queries) GetProduct(ctx context.Context, name string) (Product, error) {
	row := q.db.QueryRow(ctx, getProduct, name)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Company,
		&i.Subtype,
		&i.Weight,
		&i.Unit,
		&i.Carbs,
		&i.Protein,
		&i.Fiber,
		&i.Fats,
	)
	return i, err
}

const updateProduct = `-- name: UpdateProduct :exec
UPDATE PRODUCT set carbs=$1, protein=$2 where id=$3 RETURNING id, name, company, subtype, weight, unit, carbs, protein, fiber, fats
`

type UpdateProductParams struct {
	Carbs   pgtype.Float4
	Protein pgtype.Float4
	ID      int64
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) error {
	_, err := q.db.Exec(ctx, updateProduct, arg.Carbs, arg.Protein, arg.ID)
	return err
}
